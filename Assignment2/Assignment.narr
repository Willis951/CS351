1: Importing libraries
2:
3: Comment
4: Declaring a relation object
5: 
6: Comment
7: Comment
8: Comment
9: Comment
10: Defining facts for object maze_path
11: Adding relation (2, 8), (2, 5)
12: Adding relation (3, 1), (3, 4)
13: Adding relation (5, 6), (5, 1)
14: Adding relation (1, 4), (3, 7)
15: Adding relation (7, 4), (4, 8)
16: Adding relation (2, 7), (5, 7)
17: Adding relation (6, 9), (8, 1)
18:
19:
20: Comment
21: Comment
22: Comment
23: Comment
24: Defining function finish_maze with parameters current_position and path
25: Declaring x as var() object
26: If statement checks if current_position equals 1
27: Reversing string path
28: Printing path string
29: Else statement
30: Updating current position
31: Updating path string
32: Recursively calling finish_maze
33: 
34:
35: Comment
36: Defining start_menu function
37: Print statement
38: Print statement
39: Print statement
40: 
41:
42: Comment
43: Comment
44: Comment
45: Comment
46: Comment
47: Defining valid_answer function with parameter current_position
48: Declaring x as var() object
49: Defining possible_choices as a tuple of the children of current_position
50: Printing tuple of possible_choices
51: Choice string will hold user input
52: 
53: Checking if choice is not in tuple of possible_choices
54: While loop
55: Print statement
56: Printing tuple of possible_choices
57: Assigning value to choice
58: 
59: If statement checks if choice is in possible_choices
60: Return choice
61:
62: Return choice
63: 
64:
65: Comment
66: Comment
67: Comment
68: Comment
69: Comment
70: Comment
71: Defining start_game functoin with parameters high_score and num_of_games
72: Calling start_menu
73: If statement checks values of num_of_games and high_score
74: Getting user input
75: If statement checks if choice equals y
76: Calling finish_maze
77: New line
78: Defining score equals 0
79: Declaring x as a var() object
80: Defining current_position as 1
81: While loop iterates until current_position equals 9
82: Updating current_position
83: Updating score
84: If statements tests if score is less than high_score
85: Updating high_score
86: Printing new high_score
87: 
88: Updating num_of_games
89: Printing score
90: Printing num_of_games
91: Getting user input
92: If statement checks if answer is equal to y
93: New line
94: Calling start_game function with parameters high_score and num_of_games
95: Else statement
96: Print statement
97:
98:
99: Comment
100: Calling start_game with parameters 100 and 0
